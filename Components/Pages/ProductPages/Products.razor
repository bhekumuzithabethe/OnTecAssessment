@page "/products"
@using OnTecAssessment.Components.Domain
@using OnTecAssessment.Components.Service
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JS

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="3" Class="pa-6 ma-4">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PersonAdd"
                           Size="Size.Large" Class="ml-auto" OnClick="OpenCreateDialog">
                    New Product
                </MudButton>
            </MudItem>

            <MudItem xs="12" Class="mb-4 d-flex align-center gap-4">
                <MudSelect T="int?" Label="Filter by Category"
                           @bind-Value="selectedCategoryId"
                           Placeholder="Select category"
                           Dense="true"
                           Clearable="true">
                    <MudSelectItem T="int?" Value="null">All Categories</MudSelectItem>
                    @foreach (var category in _categories)
                    {
                        <MudSelectItem T="int?" Value="@category.Id">@category.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitCategoryFilter">
                    Apply Filter
                </MudButton>
            </MudItem>

            <MudItem xs="12">
                @if (_loading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                }

                @if (!_loading && _filteredProducts.Count == 0)
                {
                    <MudText Color="Color.Secondary">No products found in this category.</MudText>
                }

                <MudDataGrid T="ProductConstract" Items="@_filteredProducts" Loading="@_loading" Hover="true"
                             Dense="false" Striped="false" Bordered="false" ReadOnly="true" Class="elevation-1">
                    <Columns>
                        <PropertyColumn Property="x => x.Id" Title="ID" />
                        <PropertyColumn Property="x => x.Name" Title="Product Name">
                            <CellTemplate>
                                <MudStack Row="true" AlignItems="AlignItems.Center">
                                    @if (context.Item.ProductImage != null && context.Item.ProductImage.Length > 0)
                                    {
                                        var base64Image = Convert.ToBase64String(context.Item.ProductImage);
                                        var imageSrc = $"data:image/png;base64,{base64Image}";

                                        <MudImage Src="@imageSrc"
                                                Style="width: 70px; height: 70px; border-radius: 50%; object-fit: cover; cursor: pointer;"
                                                Alt="@context.Item.Name"
                                                @onclick="() => OpenImage(imageSrc)" />
                                    }
                                    else
                                    {
                                        <MudAvatar Color="Color.Primary" Size="Size.Medium">@context.Item.Name[0]</MudAvatar>
                                    }
                                    <MudText>@context.Item.Name</MudText>
                                </MudStack>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.Price" Title="Price" />
                        <PropertyColumn Property="x => x.Category.Name" Title="Category" />
                        <PropertyColumn Property="x => x.Category.Description" Title="Category Description" />
                        <TemplateColumn Title="Actions" TextAlignment="TextAlignment.Right">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="0" Class="pa-2">
                                    <MudButton Variant="Variant.Filled" class="mx-2" Color="Color.Primary" OnClick="@(() => OpenEditDialog(context.Item))">Edit</MudButton>

                                        <MudButton Variant="Variant.Filled" class="mx-2" Color="Color.Error" OnClick="@(() => OpenDeleteDialog(context.Item.Id))">DELETE</MudButton>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private List<ProductConstract> _filteredProducts = new();
    private List<CategoryConstract> _categories = new();
    private bool _loading = true;
    private int? selectedCategoryId = null;

    private async Task OpenImage(string base64Data)
    {
        await JS.InvokeVoidAsync("openBase64Image", base64Data);
    }
    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _categories = (await CategoryService.GetAllCategoriesAsync()).ToList();
        _filteredProducts = (await ProductService.GetAllProductsAsync()).ToList();
        _loading = false;
    }

    private async Task SubmitCategoryFilter()
    {
        _loading = true;

        try
        {
            if (selectedCategoryId is null)
            {
                _filteredProducts = (await ProductService.GetAllProductsAsync()).ToList();
            }
            else
            {
                _filteredProducts = (await ProductService.GetProductsByCategoryIdAsync(selectedCategoryId.Value)).ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to filter products: {ex.Message}", Severity.Error);
        }

        _loading = false;
    }

    private async Task OpenEditDialog(ProductConstract product)
    {
        var updateProduct = new UpdateProductConstract
        {
            Id = product.Id,
            Name = product.Name,
            Price = product.Price,
            CategoryId = product.CategoryId,
            ProductImage = product.ProductImage 
        };

        var parameters = new DialogParameters
        {
            ["Product"] = updateProduct,
            ["Title"] = $"Edit Product: {product.Name}"
        };

        var dialog = await DialogService.ShowAsync<EditProduct>("Edit Product", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await SubmitCategoryFilter();
            Snackbar.Add("Product updated successfully", Severity.Success);
        }
    }

    private async Task OpenDeleteDialog(int productId)
    {
        var parameters = new DialogParameters
        {
            ["ProductId"] = productId,
            ["Message"] = "Are you sure you want to delete this product? This action cannot be undone."
        };

        var dialog = await DialogService.ShowAsync<DeleteProduct>("Confirm Deletion", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            try
            {
                await ProductService.DeleteProductAsync(productId);
                await SubmitCategoryFilter();
                Snackbar.Add("Product deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to delete product: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateProduct>("Add New Product");
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await SubmitCategoryFilter(); 
            Snackbar.Add("Product created successfully", Severity.Success);
        }
    }
}
