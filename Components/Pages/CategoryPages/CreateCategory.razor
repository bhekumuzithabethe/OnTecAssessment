@using OnTecAssessment.Components.Domain
@using OnTecAssessment.Components.Service
@inject CategoryService CategoryService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialog>

    <TitleContent>
        <MudText Typo="Typo.h6">Add Category</MudText>
    </TitleContent>

    <DialogContent>
        <MudForm @ref="form" Model="@CategoryModel" OnValidSubmit="HandleValidSubmit">
            <MudTextField @bind-Value="CategoryModel.Name" Label="Category Name" Required="true" />
            <MudTextField @bind-Value="CategoryModel.Description" Label="Description" Required="false" />

            <MudStack Class="mt-4" Direction="Row" Justify="Justify.FlexEnd" Spacing="2">
                <MudButton OnClick="Cancel" Color="Color.Primary" Variant="Variant.Outlined">Cancel</MudButton>
                <MudButton OnClick="Submit"  Color="Color.Primary" Variant="Variant.Filled">Add</MudButton>
            </MudStack>
        </MudForm>
    </DialogContent>

</MudDialog>


@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    private CreateCategoryConstract CategoryModel = new();
    private MudForm form = default!;
    private async Task Cancel()
    {
        MudDialog.Cancel();
    }   
    private async Task Submit(){
        await form.Validate();
        if (form.IsValid){
            try
            {
                await CategoryService.CreateCategoryAsync(CategoryModel);
                Snackbar.Add("Category created successfully!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
                
            }
            catch (Exception ex)
            {
                // Handle exception (e.g., show error message)
                Snackbar.Add($"Error creating category: {ex.Message}", Severity.Error);
            }
        }
    }
    
}