@using Microsoft.AspNetCore.Components.Forms
@using OnTecAssessment.Components.Service
@using OnTecAssessment.Components.Domain
@using MudBlazor

@inject ProductService ProductService
@inject CategoryService CategoryService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" Model="@model" OnValidSubmit="Submit">
            <MudTextField @bind-Value="model.Name" Label="Product Name" Required="true" />
            <MudNumericField @bind-Value="model.Price" Label="Price" Required="false" />
            <MudSelect T="int" @bind-Value="model.CategoryId" Label="Category" Required="true">
                @foreach (var category in Categories)
                {
                    <MudSelectItem T="int" Value="@category.Id">@category.Name</MudSelectItem>
                }
            </MudSelect>
            
            <MudText Typo="Typo.body2" Class="mt-2 mb-1">Product Image</MudText>
            <InputFile OnChange="HandleImageUpload" />
            @if (!string.IsNullOrWhiteSpace(imagePreview))
            {
                <img src="@imagePreview" alt="Product Image" style="max-width: 150px; margin-top: 10px;" />
            }

            <MudStack Class="mt-4" Direction="Row" Justify="MudBlazor.Justify.FlexEnd" Spacing="2">
                <MudButton OnClick="Cancel" Color="Color.Primary" Variant="Variant.Outlined">Cancel</MudButton>
                <MudButton OnClick="Submit"  Color="Color.Primary" Variant="Variant.Filled">Update</MudButton>
            </MudStack>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance Dialog { get; set; } = default!;
    [Parameter, EditorRequired] public UpdateProductConstract Product { get; set; } = default!;
    [Parameter, EditorRequired] public string Title { get; set; } = string.Empty;

    private MudForm form = default!;
    private UpdateProductConstract model = new();
    private string? imagePreview;

    private IEnumerable<CategoryConstract> Categories = Enumerable.Empty<CategoryConstract>();

    protected override void OnInitialized()
    {
        model.Id = Product.Id;
        model.Name = Product.Name;
        model.Price = Product.Price;
        model.CategoryId = Product.CategoryId;
        model.ProductImage = Product.ProductImage;

        if (model.ProductImage is { Length: > 0 })
        {
            imagePreview = $"data:image/png;base64,{Convert.ToBase64String(model.ProductImage)}";
        }
    }


    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoryService.GetAllCategoriesAsync();
        
    }

    private void Cancel() => Dialog.Cancel();

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                await ProductService.UpdateProductAsync(model);
                Snackbar.Add("Product updated successfully", Severity.Success);
                Dialog.Close(DialogResult.Ok(true));
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error updating product: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            if (file.Size < 15000000)
            {
                using var stream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(stream);
                byte[] imageByte = stream.ToArray();
                imagePreview = $"data:image/png;base64,{Convert.ToBase64String(imageByte)}";
                model.ProductImage = imageByte;
            }
            else
            {
                Snackbar.Add("Image size must be less than 15MB.", Severity.Warning);
                imagePreview = null;
                model.ProductImage = null;
            }
        }
        else
        {
            Snackbar.Add("Please select a valid image file.", Severity.Warning);
            imagePreview = null;
            model.ProductImage = null;
        }
    }
}
