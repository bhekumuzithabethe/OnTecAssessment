@page "/products"
@using OnTecAssessment.Components.Domain
@using OnTecAssessment.Components.Service
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="3" Class="pa-6 ma-4">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-4">Product Directory</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PersonAdd"
                           Size="Size.Large" Class="ml-auto" OnClick="OpenCreateDialog">
                    New Product
                </MudButton>
            </MudItem>

            <MudItem xs="12" Class="mb-4">
                <MudSelect T="int?" Label="Filter by Category"
                           @bind-Value="selectedCategoryId"
                           Immediate="true"
                           Placeholder="Select category"
                           Dense="true"
                           Clearable="true">
                    <MudSelectItem T="int?" Value="null">All Categories</MudSelectItem>
                    @foreach (var category in _categories)
                    {
                        <MudSelectItem T="int?" Value="@category.Id">@category.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12">
                @if (_loading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                }

                @if (!_loading && _filteredProducts.Count == 0)
                {
                    <MudText Color="Color.Secondary">No products found in this category.</MudText>
                }

                <MudDataGrid T="ProductConstract" Items="@_filteredProducts" Loading="@_loading" Hover="true"
                             Dense="false" Striped="false" Bordered="false" ReadOnly="true" Class="elevation-1">
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Product Name">
                            <CellTemplate>
                                <MudStack Row="true" AlignItems="AlignItems.Center">
                                    <MudAvatar Color="Color.Secondary" Size="Size.Medium">@context.Item.Name[0]</MudAvatar>
                                    <MudText>@context.Item.Name</MudText>
                                </MudStack>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.Price" Title="Price" />
                        <PropertyColumn Property="x => x.Category.Name" Title="Category" />
                        <PropertyColumn Property="x => x.Category.Description" Title="Category Description" />
                        <TemplateColumn Title="Actions" TextAlignment="TextAlignment.Right">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="0" Class="pa-2">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary"
                                                   Size="Size.Small" Class="mx-1"
                                                   OnClick="@(() => OpenEditDialog(context.Item))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                                   Size="Size.Small" Class="mx-1"
                                                   OnClick="@(() => OpenDeleteDialog(context.Item.Id))" />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="ProductConstract" PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                    </PagerContent>
                </MudDataGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private List<ProductConstract> _products = new();
    private List<ProductConstract> _filteredProducts = new();
    private List<CategoryConstract> _categories = new();
    private bool _loading = true;
    private int? selectedCategoryId = null;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _categories = (await CategoryService.GetAllCategoriesAsync()).ToList();
        await LoadProducts();
        _loading = false;
    }

    private async Task LoadProducts()
    {
        try
        {
            _products = (await ProductService.GetAllProductsAsync()).ToList();
            ApplyFilter();
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to load products", Severity.Error);
        }
    }

    private void ApplyFilter()
    {
        _filteredProducts = selectedCategoryId is null
            ? _products
            : _products.Where(p => p.CategoryId == selectedCategoryId).ToList();
    }

    private async Task OnCategoryChanged(int? newCategoryId)
    {
        selectedCategoryId = newCategoryId;
        ApplyFilter();
        await InvokeAsync(StateHasChanged); // Force UI to update
    }

    private async Task OpenEditDialog(ProductConstract product)
    {
        var updateProduct = new UpdateProductConstract
        {
            Id = product.Id,
            Name = product.Name,
            Price = product.Price,
            CategoryId = product.CategoryId
        };

        var parameters = new DialogParameters
        {
            ["Product"] = updateProduct,
            ["Title"] = $"Edit Product: {product.Name}"
        };

        var dialog = await DialogService.ShowAsync<EditProduct>("Edit Product", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadProducts();
            Snackbar.Add("Product updated successfully", Severity.Success);
        }
    }

    private async Task OpenDeleteDialog(int productId)
    {
        var parameters = new DialogParameters
        {
            ["ProductId"] = productId,
            ["Message"] = "Are you sure you want to delete this product? This action cannot be undone."
        };

        var dialog = await DialogService.ShowAsync<DeleteProduct>("Confirm Deletion", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            try
            {
                await ProductService.DeleteProductAsync(productId);
                await LoadProducts();
                Snackbar.Add("Product deleted successfully", Severity.Success);
            }
            catch (Exception)
            {
                Snackbar.Add("Failed to delete product", Severity.Error);
            }
        }
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateProduct>("Add New Product");
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadProducts();
            Snackbar.Add("Product created successfully", Severity.Success);
        }
    }
}
