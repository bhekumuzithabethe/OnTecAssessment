@page "/"
@using OnTecAssessment.Components.Domain
@using OnTecAssessment.Components.Service
@inject CategoryService CategoryService
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="3" Class="pa-6 ma-4">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PersonAdd"
                    Size="Size.Large" Class="ml-auto" OnClick="OpenCreateDialog">
                    New Category
                </MudButton>
            </MudItem>

            <MudItem xs="12">
                @if (_loading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                }

                <MudDataGrid T="CategoryConstract" Items="@_categories" Loading="@_loading" Hover="true" Dense="false"
                    Striped="false" Bordered="false" ReadOnly="true" Class="elevation-1">
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Category Name">
                            <CellTemplate>
                                <MudStack Row="true" AlignItems="AlignItems.Center">
                                    <MudAvatar Color="Color.Primary" Size="Size.Medium">@(context.Item.Name[0])
                                    </MudAvatar>
                                    <MudText>@context.Item.Name</MudText>
                                </MudStack>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.Description" Title="Description" />
                        <TemplateColumn Title="Actions" TextAlignment="TextAlignment.Right">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="0" Class="pa-2">
                                        <MudButton Variant="Variant.Filled" class="mx-2" Color="Color.Primary" OnClick="@(() => OpenEditDialog(context.Item))">Edit</MudButton>

                                        <MudButton Variant="Variant.Filled" class="mx-2" Color="Color.Error" OnClick="@(() => OpenDeleteDialog(context.Item.Id))">DELETE</MudButton>
                                </MudStack>
                            </CellTemplate>

                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>


@code {
    private List<CategoryConstract> _categories = new();
    private bool _loading = true;
    private string _searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();

    }

    private async Task LoadCategories()
    {
        try
        {
            _loading = true;
            StateHasChanged();

            _categories = (await CategoryService.GetAllCategoriesAsync()).ToList();
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to load categories", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }


    @*  Edit Dialog *@
    
private async Task OpenEditDialog(CategoryConstract category)
{
    var updateCategory = new UpdateCategoryConstract
    {
        Id = category.Id,
        Name = category.Name,
        Description = category.Description
    };

    var parameters = new DialogParameters
    {
        ["Category"] = updateCategory,
        ["Title"] = $"Edit Category: {category.Name}"
    };

    var dialog = await DialogService.ShowAsync<EditCategory>("Edit Category", parameters);
    var result = await dialog.Result;

    if (!result.Canceled)
    {
        await LoadCategories();
        Snackbar.Add("Category updated successfully", Severity.Success);
    }
}


    @* Delete Dialog  *@
    private async Task OpenDeleteDialog(int categoryId)
    {
        var parameters = new DialogParameters
            {
                ["CategoryId"] = categoryId,
                ["Message"] = "Are you sure you want to delete this category? This action cannot be undone."
            };

        var dialog = await DialogService.ShowAsync<DeleteCategory>("Confirm Deletion", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await CategoryService.DeleteCategoryAsync(categoryId);
                await LoadCategories();
                Snackbar.Add("Category deleted successfully", Severity.Success);
            }
            catch (Exception)
            {
                Snackbar.Add("Failed to delete category", Severity.Error);
            }
        }
    }



    @*  Create Dialog *@

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateCategory>("Add New Category");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadCategories();
            Snackbar.Add("Category created successfully", Severity.Success);
        }
    }
}
